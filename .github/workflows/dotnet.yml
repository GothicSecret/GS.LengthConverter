# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: build

on:
  push:
    branches: [ "dev", "**" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Output Run ID
      run: echo ${{ github.run_id }}
    - name: Output Run Number
      run: echo ${{ github.run_number }}
    - name: Output Run Attempt
      run: echo ${{ github.run_attempt }}

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: GS-LengthConverter-Net6-dll
        path: |
          ./GS.LengthConverter.Net6/bin/Debug/net6.0/GS.LengthConverter.Net6.dll
          retention-days: 1


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: version
      id: version
      uses: paulhatch/semantic-version@v5.3.0
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: ""
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: ""
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}-prerelease-${increment}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
        change_path: "GS.LengthConverter"
        # Named version, will be used as suffix for name version tag
        namespace: my-service
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
        # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern   specified   is matched.
        bump_each_commit_patch_pattern: ""
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: false
        # The output method used to generate list of users, 'csv' or 'json'.
        user_format_type: "csv"
        # Prevents pre-v1.0.0 version from automatically incrementing the major version.
        # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the     version_type output is unchanged.
        enable_prerelease_mode: true
        # If enabled, diagnostic information will be added to the action output.
        debug: false
    ##
    #Outputs
    #major, minor, and patch provide the version numbers that have been determined for this commit
    #increment is an additional value indicating the number of commits for the current version, starting at zero. This can be used as part of a pre-release label.
    #version_type is the type of version change the new version represents, e.g. major, minor, patch, or none.
    #version is a formatted version string created using the format input. This is a convenience value to provide a preformatted representation of the data generated by this action.
    #version_tag is a string identifier that would be used to tag the current commit as the "released" version. Typically this would only be used to generate a Git tag name.
    #changed indicates whether there was a change since the last version if change_path was specified. If no change_path was specified this value will always be true since the entire repo is considered. (It is possible to create a commit with no changes, but the Git cli rejects this by default and this case is not considered here)
    #is_tagged indicates whether the current commit has a tag matching tag_prefix
    #authors is a list of authors that have committed to this version, formatted as either csv or json.
    #current_commit is the current commit hash.
    #previous_commit is the previous commit hash.
    #previous_version is the previous version.
    #debug_output will show diagnostic information, if debug is enabled
    ##

    - name: Checkout
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          ./GS.LengthConverter/nuspec/GS.LengthConverter.nuspec
        sparse-checkout-cone-mode: false
        #fetch-depth: 0

    #- name: Download artifacts
    #  uses: actions/download-artifact@v3
    #  with:
    #    name: GS-LengthConverter-Net6-dll

    - name: Install NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-api-key: ${{ secrets.NuGetAPIKey }}
        nuget-version: latest

    - run: ls /home/runner/work/
    - run: ls /home/runner/work/GS.LengthConverter
    - run: ls /home/runner/work/GS.LengthConverter/GS.LengthConverter
    - run: ls /home/runner/work/GS.LengthConverter/GS.LengthConverter/nuspec

    - name: NuGet Pack
      run: nuget pack ./nuspec/GS.LengthConverter.nuspec -Version ${{steps.version.outputs.version}}-build-${{github.run_number}}

    - name: NuGet Push
      run: nuget push ./GS.LengthConverter.${{steps.version.outputs.version}}-build-${{github.run_number}}.nupkg -src https://api.nuget.org/v3/index.json